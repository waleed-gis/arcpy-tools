# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2022-06-25 17:10:35
"""
import arcpy
from arcpy.ia import *
from arcpy.sa import *
from arcpy.sa import *
from sys import argv

def new_perchange(post_raster="D:\\Work\\Fiverr\\Fieverr_IncomePoverty\\change_detection\\post\\BLZ_NDVI_2020.tif", pre_raster="D:\\Work\\Fiverr\\Fieverr_IncomePoverty\\change_detection\\pre\\BLZ_NDVI_2000.tif"):  # new_perchange

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("spatial")
    arcpy.CheckOutExtension("ImageAnalyst")

    # Model Environment settings
    with arcpy.EnvManager(scratchWorkspace=r"D:\Work\Fiverr\Fieverr_IncomePoverty\change_detection\ChangeDet_EnvVar\ChangeDet_EnvVar.gdb", workspace=r"D:\Work\Fiverr\Fieverr_IncomePoverty\change_detection\ChangeDet_EnvVar\ChangeDet_EnvVar.gdb"):
        Area_of_Interest_2_ = "in_memory\\feature_set32"
        Area_of_Interest = "in_memory\\feature_set33"
        temp = "D:\\Work\\Fiverr\\Fieverr_IncomePoverty\\change_detection\\final_export\\temp"

        # Process: Calculate Statistics (2) (Calculate Statistics) (management)
        with arcpy.EnvManager(scratchWorkspace=r"D:\Work\Fiverr\Fieverr_IncomePoverty\change_detection\ChangeDet_EnvVar\ChangeDet_EnvVar.gdb", workspace=r"D:\Work\Fiverr\Fieverr_IncomePoverty\change_detection\ChangeDet_EnvVar\ChangeDet_EnvVar.gdb"):
            post_stat_raster = arcpy.management.CalculateStatistics(in_raster_dataset=post_raster, x_skip_factor=1, y_skip_factor=1, ignore_values=[], skip_existing="OVERWRITE", area_of_interest=Area_of_Interest_2_)[0]
            post_stat_raster = arcpy.Raster(post_stat_raster)

        # Process: normalize_raster_post (Raster Calculator) (sa)
        post_normalized = "C:\\arcgis_temp\\perchange_c.gdb\\%Name%_post"
        normalize_raster_post = post_normalized
        with arcpy.EnvManager(scratchWorkspace=r"D:\Work\Fiverr\Fieverr_IncomePoverty\change_detection\ChangeDet_EnvVar\ChangeDet_EnvVar.gdb", workspace=r"D:\Work\Fiverr\Fieverr_IncomePoverty\change_detection\ChangeDet_EnvVar\ChangeDet_EnvVar.gdb"):
            post_normalized = (post_stat_raster - post_stat_raster.minimum) / (post_stat_raster.maximum - post_stat_raster.minimum)
            post_normalized.save(normalize_raster_post)


        # Process: Calculate Statistics (Calculate Statistics) (management)
        with arcpy.EnvManager(scratchWorkspace=r"D:\Work\Fiverr\Fieverr_IncomePoverty\change_detection\ChangeDet_EnvVar\ChangeDet_EnvVar.gdb", workspace=r"D:\Work\Fiverr\Fieverr_IncomePoverty\change_detection\ChangeDet_EnvVar\ChangeDet_EnvVar.gdb"):
            pre_stat_raster = arcpy.management.CalculateStatistics(in_raster_dataset=pre_raster, x_skip_factor=1, y_skip_factor=1, ignore_values=[], skip_existing="OVERWRITE", area_of_interest=Area_of_Interest)[0]
            pre_stat_raster = arcpy.Raster(pre_stat_raster)

        # Process: normalize_raster_pre (Raster Calculator) (sa)
        pre_normalized = "C:\\arcgis_temp\\perchange_c.gdb\\%Name%_pre"
        normalize_raster_pre = pre_normalized
        with arcpy.EnvManager(scratchWorkspace=r"D:\Work\Fiverr\Fieverr_IncomePoverty\change_detection\ChangeDet_EnvVar\ChangeDet_EnvVar.gdb", workspace=r"D:\Work\Fiverr\Fieverr_IncomePoverty\change_detection\ChangeDet_EnvVar\ChangeDet_EnvVar.gdb"):
            pre_normalized = (pre_stat_raster - pre_stat_raster.minimum) / (pre_stat_raster.maximum - pre_stat_raster.minimum)
            pre_normalized.save(normalize_raster_pre)


        # Process: Percent Change Detection (Raster Calculator) (ia)
        perchange = "C:\\arcgis_temp\\perchange_c.gdb\\%Name%pc"
        Percent_Change_Detection = perchange
        with arcpy.EnvManager(scratchWorkspace=r"D:\Work\Fiverr\Fieverr_IncomePoverty\change_detection\ChangeDet_EnvVar\ChangeDet_EnvVar.gdb", workspace=r"D:\Work\Fiverr\Fieverr_IncomePoverty\change_detection\ChangeDet_EnvVar\ChangeDet_EnvVar.gdb"):
            perchange = ((post_normalized -  pre_normalized ) / ( pre_normalized )) * 100
            perchange.save(Percent_Change_Detection)


        # Process: Mosaic To New Raster (Mosaic To New Raster) (management)
        _Name_1_tif = arcpy.management.MosaicToNewRaster(input_rasters=[perchange], output_location=temp, raster_dataset_name_with_extension="%Name%1.tif", coordinate_system_for_the_raster="GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]]", pixel_type="32_BIT_FLOAT", cellsize=None, number_of_bands=None, mosaic_method="LAST", mosaic_colormap_mode="FIRST")[0]
        _Name_1_tif = arcpy.Raster(_Name_1_tif)

if __name__ == '__main__':
    new_perchange(*argv[1:])
